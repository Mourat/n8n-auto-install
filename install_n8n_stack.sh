#!/bin/bash

set -e

GREEN='\033[0;32m'
NC='\033[0m' # No Color

log_step() {
  echo -e "\n${GREEN}==> $1...${NC}"
}

# ========================
# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
# ========================
log_step "üîß –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"

read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è n8n –∏ pgAdmin (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com): " DOMAIN
read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt: " EMAIL
read -p "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è pgAdmin: " PGADMIN_USER
read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è pgAdmin: " PGADMIN_PASSWORD
echo

# ========================
# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
# ========================
log_step "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤"
mkdir -p ~/n8n-docker && cd ~/n8n-docker
mkdir -p certbot/www certbot/conf

# ========================
# docker-compose.yml
# ========================
log_step "üìù –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml"
cat > docker-compose.yml <<EOF
version: "3.8"

services:
  n8n:
    image: n8nio/n8n
    restart: always
    environment:
      WEBHOOK_URL: "https://${DOMAIN}/"
      N8N_HOST: "${DOMAIN}"
      N8N_PORT: 5678
      N8N_PROTOCOL: "https"
    ports:
      - "5678:5678"
    volumes:
      - ./n8n_data:/home/node/.n8n

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: project_user
      POSTGRES_PASSWORD: project_pass
      POSTGRES_DB: projects_db
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    command: postgres -c 'shared_preload_libraries=pgvector'

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - n8n
      - pgadmin

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1; done'"
EOF

# ========================
# nginx.conf
# ========================
log_step "üìù –°–æ–∑–¥–∞–Ω–∏–µ nginx.conf"
cat > nginx.conf <<EOF
events {}

http {
    server {
        listen 80;
        server_name ${DOMAIN};

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://\$host\$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name ${DOMAIN};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

        location / {
            proxy_pass http://n8n:5678;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }

        location /pgadmin/ {
            proxy_pass http://pgadmin:80/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOF

# ========================
# Docker –∏ Compose
# ========================
log_step "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ Docker Compose"

if ! command -v docker &> /dev/null; then
  log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
  sudo apt update && sudo apt install -y docker.io
  sudo systemctl enable docker --now
fi

if ! command -v docker-compose &> /dev/null; then
  log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
  sudo apt install -y docker-compose
fi

# ========================
# –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
# ========================
log_step "üîê –ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é certbot"
docker-compose run --rm certbot certonly \
  --webroot --webroot-path=/var/www/certbot \
  --email ${EMAIL} --agree-tos --no-eff-email \
  -d ${DOMAIN}

# ========================
# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
# ========================
log_step "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
docker-compose up -d

# ========================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector
# ========================
log_step "üß† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector –≤ PostgreSQL"
sleep 5
docker exec -i $(docker-compose ps -q postgres) psql -U project_user -d projects_db -c "CREATE EXTENSION IF NOT EXISTS vector;"

# ========================
# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# ========================
log_step "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

echo
echo "üåê n8n –¥–æ—Å—Ç—É–ø–µ–Ω: https://${DOMAIN}/"
echo "üåê pgAdmin –¥–æ—Å—Ç—É–ø–µ–Ω: https://${DOMAIN}/pgadmin"
echo
echo "üîë PostgreSQL:"
echo "  –•–æ—Å—Ç: postgres (–≤–Ω—É—Ç—Ä–∏ docker-—Å–µ—Ç–∏)"
echo "  –ë–î: projects_db"
echo "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: project_user"
echo "  –ü–∞—Ä–æ–ª—å: project_pass"
echo
echo "üîê –î–æ—Å—Ç—É–ø –∫ pgAdmin:"
echo "  –õ–æ–≥–∏–Ω: ${PGADMIN_USER}"
echo "  –ü–∞—Ä–æ–ª—å: ${PGADMIN_PASSWORD}"
echo
